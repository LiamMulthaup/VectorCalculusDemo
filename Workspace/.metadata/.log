!SESSION 2019-04-07 19:58:18.868 -----------------------------------------------
eclipse.buildId=4.9.0.I20180906-0745
java.version=1.8.0_191
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2019-04-07 19:58:40.114
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Liam'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2019-04-07 19:59:42.701 -----------------------------------------------
eclipse.buildId=4.9.0.I20180906-0745
java.version=1.8.0_191
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2019-04-07 19:59:55.477
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Liam'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2019-04-07 20:31:08.120 -----------------------------------------------
eclipse.buildId=4.9.0.I20180906-0745
java.version=1.8.0_191
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2019-04-07 20:35:55.739
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Liam'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.core 4 4 2019-04-08 00:36:11.296
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Objects3D;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;

import javax.swing.JFrame;

import ui.Page;
import ui.Control;
import ui.ControlHandler;
import ui.Label;

public class Test {
	static boolean stars = false;
	static boolean sun = false;
	static boolean saturn = false;
	public static void main(String[] args)
	{
		JFrame Screen = new JFrame();
		Screen.setTitle("Conquer");
		Screen.setExtendedState(JFrame.MAXIMIZED_BOTH);
		Screen.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		Panel3D panel = new Panel3D();
		Screen.setSize(1600, 800);
		panel.setBackground(new Color(0, 0, 0));
		Screen.setBackground(new Color(0, 0, 0));
		panel.setBackground(new Color(0, 0, 0));
		final int wavelength = 90;
		final int width = 100;
		Dot[] dots = new Dot[width * width];//100001];
		///*
		for (double k = 0; k < width * width; k+= 1)
		{
			double x = k % width * wavelength - width * wavelength / 2 - 20;
			double y = (int)(k / width) * wavelength - width * wavelength / 2 - 20;
			double sineSwitch = Math.cos(k * 12324515131.1564) / Math.abs(Math.cos(k * 12324515131.1564));
			Dot a = new Dot(new Point3D(x, y, 1000 * Math.pow(Math.cos(x / 1000),2) * Math.pow(Math.cos(y / 1000), 2)));
			a.radius = 40;
			a.color = new Color((int) (200),(int) (0),(int) (200));
			panel.addControl3D(a);
			dots[(int)k] = a;
		}
		/*
		new Timer().scheduleAtFixedRate(new TimerTask()
		{
			double radiusTurn = 0;
			public void run()
			{
				radiusTurn-= Math.PI / 300;
				for (double k = -0; k < width * width; k+= 2)
				{
					//dots[(int)k].location = new Point3D(Math.sin(k / 10 + radiusTurn) * k / 10, k - 10000, Math.sin(k / 10 - Math.PI / 2 + radiusTurn) * k / 10);
					double xOffset = 0;
					double yOffset = 0;
					double distance = Math.sqrt((Math.sin(k / 10) * k - xOffset) * (Math.sin(k / 10) * k - xOffset) + (Math.sin(k / 10 - Math.PI / 2) * k - yOffset) * (Math.sin(k / 10 - Math.PI / 2) * k - yOffset));
					//dots[(int)k].location = new Point3D(Math.sin(k / 10) * k, Math.sin(k / 10 - Math.PI / 2) * k, Math.cos(Math.sqrt((Math.sin(k / 10) * k - xOffset) * (Math.sin(k / 10) * k - xOffset) + (Math.sin(k / 10 - Math.PI / 2) * k - yOffset) * (Math.sin(k / 10 - Math.PI / 2) * k - yOffset)) / 400 + radiusTurn) * 800000 / Math.pow(distance, 1) );
					double sineSwitch = Math.cos(k * 12324515131.1564) / Math.abs(Math.cos(k * 12324515131.1564));
					double x = k % width * wavelength - width * wavelength / 2 - 20;
					double y = (int)(k / width) * wavelength - width * wavelength / 2 - 20;
					dots[(int)k].location = new Point3D(new Point3D(x, y + 5000, sineSwitch * Math.sqrt(-500000 * Math.cos(radiusTurn) + x * x + y * y)));
				}
				Screen.repaint();
			}
		}
		, 10, 10);
		*/
		if (saturn)
		{
			for (double k = 0; k <= 2500; k+= 1)
			{
				Dot a = new Dot(new Point3D( Math.cos(k / 20) * (int)(k / 40 / Math.PI + 40) * 50, Math.sin(k / 20) * (int)(k / 40 / Math.PI + 40) * 50 + 100000, -5000));
				a.radius = 200;
				a.color = new Color((int) (Math.random() * 60) + 100,(int) (Math.random() * 60) + 100,(int) (Math.random() * 60) + 100);
				panel.addControl3D(a);
			}
		}
		if (stars)
		{
			for (double k = 0; k <= 25000; k+= 1)
			{
				double angleHorizontal = Math.random() * 2 * Math.PI;
				double angleVertical = Math.random() * 2 * Math.PI;
				Point3D starLocation = new Point3D(0, 0, 0).getPointAt(new Angle3D(angleHorizontal, angleVertical), 20000000);
				Dot a = new Dot(starLocation);
				a.radius = 50000 + Math.random() * 30000;
				a.color = new Color((int) (Math.random() * 56) + 200, 255,(int) (Math.random() * 56) + 200);
				panel.addControl3D(a);
			}
		}
		int cubeDotDistance = 20;
		int cubeDistance = 8000;
		for (int y = -200; y < 200; y+=cubeDotDistance)
		{
			for (int z = -200; z < 200; z+=cubeDotDistance)
			{
				Dot a = new Dot(new Point3D(1000 + cubeDistance, y, z));
				a.color = new Color((int) (255),(int) (0),(int) (0));
				panel.addControl3D(a);
			}
		}
		
		for (int x = 1000; x < 1400; x+=cubeDotDistance)
		{
			for (int z = -200; z < 200; z+=cubeDotDistance)
			{
				Dot a = new Dot(new Point3D(x + cubeDistance, 200, z));
				a.color = new Color((int) (0),(int) (255),(int) (0));
				panel.addControl3D(a);
			}
		}
		
		for (int x = 1000; x < 1400; x+=cubeDotDistance)
		{
			for (int z = -200; z < 200; z+=cubeDotDistance)
			{
				Dot a = new Dot(new Point3D(x + cubeDistance, - 200, z));
				a.color = new Color((int) (0),(int) (0),(int) (255));
				panel.addControl3D(a);
			}
		}
		
		for (int y = -200; y < 200; y+=cubeDotDistance)
		{
			for (int z = -200; z < 200; z+=cubeDotDistance)
			{
				Dot a = new Dot(new Point3D(1400 + cubeDistance, y, z));
				a.color = new Color((int) (255),(int) (255),(int) (0));
				panel.addControl3D(a);
			}
		}
		
		for (int x = 1000; x < 1400; x+=cubeDotDistance)
		{
			for (int y = -200; y < 200; y+=cubeDotDistance)
			{
				Dot a = new Dot(new Point3D(x + cubeDistance, y, 200));
				a.color = new Color((int) (255),(int) (0),(int) (255));
				panel.addControl3D(a);
			}
		}
		
		for (int x = 1000; x < 1400; x+=cubeDotDistance)
		{
			for (int y = -200; y < 200; y+=cubeDotDistance)
			{
				Dot a = new Dot(new Point3D(x + cubeDistance, y, - 200));
				a.color = new Color((int) (255),(int) (118),(int) (0));
				panel.addControl3D(a);
			}
		}
		if (saturn)
		{
			Dot saturn = new Dot(new Point3D(0, 100000, - 5000));
			saturn.color = new Color(195, 107, 31);
			saturn.radius = 10000;
			panel.addControl3D(saturn);
		}
		Dot cubeLocator = new Dot(new Point3D(1200 + cubeDistance, 0, 0));
		cubeLocator.radius = 300;
		cubeLocator.color = new Color(255, 125, 0);
		
		//System.out.println(new Point3D(10, 10, 10).getAngleTo(new Point3D(0, 0, 0)));
		
		if (sun)
		{
			LensFlare sun = new LensFlare(new Point3D(100000, 1000000, 0));
			sun.color = new Color(247, 184, 19);
			sun.radius = 100000;
			panel.addControl3D(sun);
		}
		
		KeyEventListener listener = new KeyEventListener();
		Screen.addKeyListener(listener);
		
		panel.mouseLocked = true;
		BufferedImage cursorImg = new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB);
		Cursor blankCursor = Toolkit.getDefaultToolkit().createCustomCursor(
		    cursorImg, new Point(0, 0), "blank cursor");
		Screen.getContentPane().setCursor(blankCursor);
		listener.exit = false;
		
		panel.addControl3D(cubeLocator);
		Screen.add(panel);
		Screen.setVisible(true);
		Screen.repaint();
		Timer tim = new Timer();
		tim.scheduleAtFixedRate(new TimerTask()
		{
			Point3D movementVector = new Point3D();
			boolean rocketMode = false;
			boolean lightSpeed = false;
			public void run()
			{
				final double distance;
				if (rocketMode)
				{
					if (lightSpeed & (listener.wPressed || listener.aPressed || listener.sPressed || listener.dPressed || listener.spacePressed || listener.shiftPressed))
					{
						distance = 10000;
						lightSpeed = false;
					}
					else
					{
						distance = 0.1;
					}
				}
				else
				{
					distance = 2;
				}
				boolean paint = false;
				Point3D addVector = new Point3D();
				Point3D vectorWorking;
				if (rocketMode == true)
				{
					vectorWorking = addVector;
					paint = true;
				}
				else
				{
					vectorWorking = panel.perspectiveLocation;
				}
				if (listener.wPressed)
				{
					vectorWorking.x+=Math.cos(panel.perspectiveAngle.horizontal) * distance;
					vectorWorking.y+=Math.sin(panel.perspectiveAngle.horizontal) * distance;
					paint = true;
				}
				if (listener.aPressed)
				{
					vectorWorking.x-=Math.cos(panel.perspectiveAngle.horizontal - Math.PI / 2) * distance;
					vectorWorking.y-=Math.sin(panel.perspectiveAngle.horizontal - Math.PI / 2) * distance;
					paint = true;
				}
				if (listener.sPressed)
				{
					vectorWorking.x-=Math.cos(panel.perspectiveAngle.horizontal) * distance;
					vectorWorking.y-=Math.sin(panel.perspectiveAngle.horizontal) * distance;
					paint = true;
				}
				if (listener.dPressed)
				{
					vectorWorking.x-=Math.cos(panel.perspectiveAngle.horizontal + Math.PI / 2) * distance;
					vectorWorking.y-=Math.sin(panel.perspectiveAngle.horizontal + Math.PI / 2) * distance;
					paint = true;
				}
				if (listener.upPressed)
				{
					panel.perspectiveAngle.vertical+=0.01;
					paint = true;
				}
				if (listener.downPressed)
				{
					panel.perspectiveAngle.vertical-=0.01;
					paint = true;
				}
				if (listener.spacePressed)
				{
					paint = true;
					vectorWorking.z+=distance;
				}
				if (listener.shiftPressed)
				{
					paint = true;
					vectorWorking.z-=distance;
				}
				if (listener.rightPressed)
				{
					panel.perspectiveAngle.horizontal-=0.01;
					paint = true;
				}
				if (listener.leftPressed)
				{
					panel.perspectiveAngle.horizontal+=0.01;
					paint = true;
				}
				/*
				if (listener.gPressed)
				{
					panel.FOV-=5;
					paint = true;
				}
				*/
				if (listener.hPressed)
				{
					movementVector = new Point3D();
				}
				if (listener.rPressed)
				{
					listener.rPressed = false;
					if (rocketMode)
					{
						rocketMode = false;
						lightSpeed = false;
						movementVector = new Point3D();
					}
					else
					{
						rocketMode = true;
						movementVector = new Point3D();
					}
				}
				if (listener.lPressed)
				{
					listener.lPressed = false;
					if (rocketMode)
					{
						lightSpeed = true;
					}
				}
				if (listener.exit)
				{
					if (panel.mouseLocked)
					{
						panel.mouseLocked = false;
						Screen.getContentPane().setCursor(Cursor.getDefaultCursor());
						listener.exit = false;
					}
					else
					{
						panel.mouseLocked = true;
						BufferedImage cursorImg = new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB);
						Cursor blankCursor = Toolkit.getDefaultToolkit().createCustomCursor(
						    cursorImg, new Point(0, 0), "blank cursor");
						Screen.getContentPane().setCursor(blankCursor);
						listener.exit = false;
					}
				}
				movementVector = movementVector.addPoint(addVector);
				panel.perspectiveLocation = panel.perspectiveLocation.addPoint(movementVector);
				if (panel.mouseLocked == true)
				{
					paint = true;
				}
				if (paint)
				{
					Screen.repaint();
				}
			}
		}, 10, 10);
		panel.addMouseListener();
		Label instructionalText = new Label("Press [esc] For Menu", panel, new Point());
		instructionalText.setFont(new Font("Times New Roman", Font.BOLD, 40));
		instructionalText.setLocation(new Point(panel.getWidth() / 2 - instructionalText.getWidth() / 2, panel.getHeight() / 2 - instructionalText.getHeight() / 2));
		instructionalText.setVisible(true);
		Timer tim2 = new Timer();
		
		tim2.scheduleAtFixedRate(new TimerTask()
		{
			int ticks = 
			public void run()
			{
				
			}
		}, 10, 10);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2934)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToFieldDeclaration(ASTConverter.java:3298)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:447)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:336)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2564)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1747)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2214)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1831)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2804)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:648)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3036)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1393)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:343)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1145)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1322)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2019-04-08 00:36:11.343
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2934)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToFieldDeclaration(ASTConverter.java:3298)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:447)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:336)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2564)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1747)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2214)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1831)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2804)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:648)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3036)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1393)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:343)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1145)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1322)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2019-04-08 00:36:11.343
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2934)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToFieldDeclaration(ASTConverter.java:3298)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:447)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:336)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2564)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1747)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2214)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1831)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2804)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:648)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3036)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1393)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:343)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1145)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1322)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
!SESSION 2019-04-08 15:30:13.716 -----------------------------------------------
eclipse.buildId=4.9.0.I20180906-0745
java.version=1.8.0_191
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2019-04-08 15:30:38.223
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Liam'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2019-04-08 22:19:00.123 -----------------------------------------------
eclipse.buildId=4.9.0.I20180906-0745
java.version=1.8.0_191
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2019-04-08 22:19:32.626
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Liam'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2019-04-08 22:38:53.178 -----------------------------------------------
eclipse.buildId=4.9.0.I20180906-0745
java.version=1.8.0_191
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2019-04-08 22:39:09.869
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Liam'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2019-04-09 15:50:40.301 -----------------------------------------------
eclipse.buildId=4.9.0.I20180906-0745
java.version=1.8.0_191
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2019-04-09 15:50:55.022
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Liam'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2019-04-10 14:20:08.874 -----------------------------------------------
eclipse.buildId=4.9.0.I20180906-0745
java.version=1.8.0_191
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2019-04-10 14:20:27.755
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Liam'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.core 4 4 2019-04-10 14:22:30.720
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Objects3D;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;

import javax.swing.JFrame;

import ui.Page;
import ui.RadioButton;
import ui.TextBox;
import ui.Button;
import ui.Control;
import ui.ControlHandler;
import ui.Label;

public class Test {
	final static int wavelength = 120;
	final static int width = 80;
	static public Dot[] dots = new Dot[width * width];
	public static void main(String[] args)
	{
		JFrame Screen = new JFrame();
		Screen.setTitle("Conquer");
		Screen.setExtendedState(JFrame.MAXIMIZED_BOTH);
		Screen.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		Panel3D panel = new Panel3D();
		Screen.setSize(1600, 800);
		panel.setBackground(new Color(0, 0, 0));
		Screen.setBackground(new Color(0, 0, 0));
		panel.setBackground(new Color(0, 0, 0));
		
		worldSetUp(panel);
		
		KeyEventListener listener = new KeyEventListener();
		Screen.addKeyListener(listener);
		
		panel.mouseLocked = true;
		BufferedImage cursorImg = new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB);
		Cursor blankCursor = Toolkit.getDefaultToolkit().createCustomCursor(
		    cursorImg, new Point(0, 0), "blank cursor");
		Screen.getContentPane().setCursor(blankCursor);
		listener.exit = false;
		
		Screen.add(panel);
		Screen.setVisible(true);
		Screen.repaint();
		MenuControlHandler handler = new MenuControlHandler(panel);
		panel.menu = new Page(600, 670, panel, new Point(panel.getWidth() / 2 - 300, panel.getHeight() / 2 - 335));
		panel.menu.backgroundVisibility = 0.8;
		panel.menu.color = new Color(86, 91, 223);
		panel.menuLabel = new Label("Menu", panel, new Point());
		panel.menuLabel.setFont(new Font("Rockwell", Font.BOLD, 80));
		panel.menuLabel.setLocation(new Point(panel.menu.getWidth() / 2 - panel.menuLabel.getWidth() / 2, 40));
		panel.menuLabel.setVisible(true);
		panel.menuLabel.color = new Color(255, 255, 255);
		panel.setCalculationLabel = new Label("Set Calculation", panel, new Point());
		panel.setCalculationLabel.setFont(new Font("Rockwell", Font.PLAIN, 30));
		panel.setCalculationLabel.setLocation(new Point(panel.menu.getWidth() / 2 - panel.setCalculationLabel.getWidth() / 2, 130));
		panel.setCalculationLabel.color = new Color(200,200,200);
		panel.setCalculationLabel.setVisible(true);
		panel.setCalculationLabel.id = "Open Calculation Window";
		panel.setCalculationLabel.controlHandler = handler;
		panel.specialSettingsLabel = new Label("Special Settings", panel, new Point());
		panel.specialSettingsLabel.setFont(new Font("Rockwell", Font.PLAIN, 30));
		panel.specialSettingsLabel.setLocation(new Point(panel.menu.getWidth() / 2 - panel.specialSettingsLabel.getWidth() / 2, 170));
		panel.specialSettingsLabel.color = new Color(200,200,200);
		panel.specialSettingsLabel.setVisible(true);
		panel.specialSettingsLabel.id = "Open Special Settings Window";
		panel.specialSettingsLabel.controlHandler = handler;
		panel.menu.add(panel.specialSettingsLabel);
		panel.menu.add(panel.setCalculationLabel);
		panel.menu.add(panel.menuLabel);
		panel.starsRadioButton = new RadioButton("Stars", panel, new Point());
		panel.starsRadioButton.setFont(new Font("Rockwell", Font.PLAIN, 30));
		panel.starsRadioButton.setLocation(new Point(panel.menu.getWidth() / 2 - panel.starsRadioButton.getWidth() / 2, 130));
		panel.starsRadioButton.color = new Color(0,0,0);
		panel.starsRadioButton.opaqueBubble = false;
		panel.starsRadioButton.setVisible(false);
		panel.starsRadioButton.singleChoice = false;
		panel.starsRadioButton.id = "Stars";
		panel.starsRadioButton.controlHandler = handler;
		panel.menu.add(panel.starsRadioButton);
		panel.sunRadioButton = new RadioButton("Sun", panel, new Point());
		panel.sunRadioButton.setFont(new Font("Rockwell", Font.PLAIN, 30));
		panel.sunRadioButton.setLocation(new Point(panel.menu.getWidth() / 2 - panel.starsRadioButton.getWidth() / 2, 170));
		panel.sunRadioButton.color = new Color(0,0,0);
		panel.sunRadioButton.opaqueBubble = false;
		panel.sunRadioButton.setVisible(false);
		panel.sunRadioButton.selected = true;
		panel.sunRadioButton.singleChoice = false;
		panel.sunRadioButton.id = "Sun";
		panel.sunRadioButton.controlHandler = handler;
		panel.menu.add(panel.sunRadioButton);
		panel.saturnRadioButton = new RadioButton("Saturn", panel, new Point());
		panel.saturnRadioButton.setFont(new Font("Rockwell", Font.PLAIN, 30));
		panel.saturnRadioButton.setLocation(new Point(panel.menu.getWidth() / 2 - panel.starsRadioButton.getWidth() / 2, 210));
		panel.saturnRadioButton.color = new Color(0,0,0);
		panel.saturnRadioButton.opaqueBubble = false;
		panel.saturnRadioButton.setVisible(false);
		panel.saturnRadioButton.singleChoice = false;
		panel.saturnRadioButton.id = "Saturn";
		panel.saturnRadioButton.controlHandler = handler;
		panel.menu.add(panel.saturnRadioButton);
		panel.backLabel = new Label("back", panel, new Point());
		panel.backLabel.setFont(new Font("Rockwell", Font.BOLD, 30));
		panel.backLabel.setLocation(new Point(panel.menu.getWidth() - panel.backLabel.getWidth() - 20, panel.menu.getHeight() - panel.backLabel.getHeight() - 20));
		panel.backLabel.color = new Color(255,255,255);
		panel.backLabel.setVisible(false);
		panel.backLabel.id = "back";
		panel.backLabel.controlHandler = handler;
		panel.menu.add(panel.backLabel);
		panel.zLabel = new Label("z =", panel, new Point(120,140));
		panel.zLabel.setFont(new Font("Arial", Font.PLAIN, 25));
		panel.zLabel.color = new Color(255,255,255);
		panel.zLabel.setVisible(false);
		panel.menu.add(panel.zLabel);
		panel.zTextBox = new TextBox(300, 30, panel, new Point(160, 137), Screen);
		panel.zTextBox.setFont(new Font("Arial", Font.PLAIN, 20));
		panel.zTextBox.setText("Hello");
		panel.zTextBox.setVisible(false);
		panel.menu.add(panel.zTextBox);
		panel.calculateButton = new Button(" Calculate", 93, 30, panel, new Point());
		panel.calculateButton.setLocation(new Point(panel.menu.getWidth() / 2 - panel.calculateButton.getWidth() / 2, 400));
		panel.calculateButton.antialiasing = true;
		panel.calculateButton.backgroundVisibility = 0;
		panel.calculateButton.setFont(new Font("Arial", Font.PLAIN, 20));
		panel.calculateButton.color = new Color(255,255,255);
		panel.calculateButton.borderColor = new Color(255,255,255);
		panel.calculateButton.rounded = true;
		panel.calculateButton.id = "Calculate";
		panel.calculateButton.controlHandler = handler;
		panel.menu.add(panel.calculateButton);
		panel.calculateButton.roundedHeight = 30;
		panel.calculateButton.roundedWidth = 30;
		panel.rangeLabel = new Label("Range:", panel, new Point());
		panel.rangeLabel.setFont(new Font("Arial", Font.BOLD, 30));
		panel.rangeLabel.setLocation(new Point(panel.menu.getWidth() / 2 - panel.rangeLabel.getWidth() / 2, 200));
		panel.rangeLabel.color = new Color(255, 255, 255);
		panel.rangeLabel.setVisible(false);
		panel.menu.add(panel.rangeLabel);
		panel.xMinLabel = new Label("xMin:", panel, new Point());
		panel.xMinLabel.setFont(new Font("Arial", Font.PLAIN, 20));
		panel.xMinLabel.setLocation(new Point(panel.menu.getWidth() / 2 - 80 - panel.xMinLabel.getWidth(), 250));
		panel.xMinLabel.color = new Color(255, 255, 255);
		panel.xMinLabel.setVisible(false);
		panel.menu.add(panel.xMinLabel);
		panel.xMaxLabel = new Label("xMax:", panel, new Point());
		panel.xMaxLabel.setFont(new Font("Arial", Font.PLAIN, 20));
		panel.xMaxLabel.setLocation(new Point(panel.menu.getWidth() / 2 - 80 - panel.xMaxLabel.getWidth(), 280));
		panel.xMaxLabel.color = new Color(255, 255, 255);
		panel.xMaxLabel.setVisible(false);
		panel.menu.add(panel.xMaxLabel);
		panel.yMinLabel = new Label("yMin:", panel, new Point());
		panel.yMinLabel.setFont(new Font("Arial", Font.PLAIN, 20));
		panel.yMinLabel.setLocation(new Point(panel.menu.getWidth() / 2 + 100 - panel.yMinLabel.getWidth(), 250));
		panel.yMinLabel.color = new Color(255, 255, 255);
		panel.yMinLabel.setVisible(false);
		panel.menu.add(panel.yMinLabel);
		panel.yMaxLabel = new Label("yMax:", panel, new Point());
		panel.yMaxLabel.setFont(new Font("Arial", Font.PLAIN, 20));
		panel.yMaxLabel.setLocation(new Point(panel.menu.getWidth() / 2 + 100 - panel.yMaxLabel.getWidth(), 280));
		panel.yMaxLabel.color = new Color(255, 255, 255);
		panel.yMaxLabel.setVisible(false);
		panel.menu.add(panel.yMaxLabel);
		panel.xMinTextBox = new TextBox(30, 30, panel, new Point(panel.menu.getWidth() / 2 - 75, 245), Screen);
		panel.xMinTextBox.setFont(new Font("Arial", Font.PLAIN, 20));
		panel.xMinTextBox.setText("1");
		panel.xMinTextBox.acceptsLetters = false;
		panel.xMinTextBox.setVisible(false);
		panel.menu.add(panel.xMinTextBox);
		panel.xMaxTextBox = new TextBox(30, 30, panel, new Point(panel.menu.getWidth() / 2 - 75, 275), Screen);
		panel.xMaxTextBox.setFont(new Font("Arial", Font.PLAIN, 20));
		panel.xMaxTextBox.setText("-1");
		panel.xMaxTextBox.acceptsLetters = false;
		panel.xMaxTextBox.setVisible(false);
		panel.menu.add(panel.xMaxTextBox);
		panel.yMinTextBox = new TextBox(30, 30, panel, new Point(panel.menu.getWidth() / 2 + 105, 245), Screen);
		panel.yMinTextBox.setFont(new Font("Arial", Font.PLAIN, 20));
		panel.yMinTextBox.setText("1");
		panel.yMinTextBox.acceptsLetters = false;
		panel.yMinTextBox.setVisible(false);
		panel.menu.add(panel.yMinTextBox);
		panel.yMaxTextBox = new TextBox(30, 30, panel, new Point(panel.menu.getWidth() / 2 + 105, 275), Screen);
		panel.yMaxTextBox.setFont(new Font("Arial", Font.PLAIN, 20));
		panel.yMaxTextBox.setText("-1");
		panel.yMaxTextBox.acceptsLetters = false;
		panel.yMaxTextBox.setVisible(false);
		panel.menu.add(panel.yMaxTextBox);
		Timer tim = new Timer();
		tim.scheduleAtFixedRate(new TimerTask()
		{
			Point3D movementVector = new Point3D();
			boolean rocketMode = false;
			boolean lightSpeed = false;
			public void run()
			{
				final double distance;
				if (rocketMode)
				{
					if (lightSpeed & (listener.wPressed || listener.aPressed || listener.sPressed || listener.dPressed || listener.spacePressed || listener.shiftPressed))
					{
						distance = 10000;
						lightSpeed = false;
					}
					else
					{
						distance = 0.1;
					}
				}
				else
				{
					distance = 2;
				}
				boolean paint = panel.paint;
				Point3D addVector = new Point3D();
				Point3D vectorWorking = new Point3D();
				if (panel.mouseLocked)
				{
					if (rocketMode == true)
					{
						vectorWorking = addVector;
						paint = true;
					}
					else
					{
						vectorWorking = panel.perspectiveLocation;
					}
				}
				if (listener.wPressed)
				{
					vectorWorking.x+=Math.cos(panel.perspectiveAngle.horizontal) * distance;
					vectorWorking.y+=Math.sin(panel.perspectiveAngle.horizontal) * distance;
					paint = true;
				}
				if (listener.aPressed)
				{
					vectorWorking.x-=Math.cos(panel.perspectiveAngle.horizontal - Math.PI / 2) * distance;
					vectorWorking.y-=Math.sin(panel.perspectiveAngle.horizontal - Math.PI / 2) * distance;
					paint = true;
				}
				if (listener.sPressed)
				{
					vectorWorking.x-=Math.cos(panel.perspectiveAngle.horizontal) * distance;
					vectorWorking.y-=Math.sin(panel.perspectiveAngle.horizontal) * distance;
					paint = true;
				}
				if (listener.dPressed)
				{
					vectorWorking.x-=Math.cos(panel.perspectiveAngle.horizontal + Math.PI / 2) * distance;
					vectorWorking.y-=Math.sin(panel.perspectiveAngle.horizontal + Math.PI / 2) * distance;
					paint = true;
				}
				if (listener.upPressed)
				{
					panel.perspectiveAngle.vertical+=0.01;
					paint = true;
				}
				if (listener.downPressed)
				{
					panel.perspectiveAngle.vertical-=0.01;
					paint = true;
				}
				if (listener.spacePressed)
				{
					paint = true;
					vectorWorking.z+=distance;
				}
				if (listener.shiftPressed)
				{
					paint = true;
					vectorWorking.z-=distance;
				}
				if (listener.rightPressed)
				{
					panel.perspectiveAngle.horizontal-=0.01;
					paint = true;
				}
				if (listener.leftPressed)
				{
					panel.perspectiveAngle.horizontal+=0.01;
					paint = true;
				}
				/*
				if (listener.gPressed)
				{
					panel.FOV-=5;
					paint = true;
				}
				*/
				if (listener.hPressed)
				{
					movementVector = new Point3D();
				}
				if (listener.rPressed)
				{
					listener.rPressed = false;
					if (rocketMode)
					{
						rocketMode = false;
						lightSpeed = false;
						movementVector = new Point3D();
					}
					else
					{
						rocketMode = true;
						movementVector = new Point3D();
					}
				}
				if (listener.lPressed)
				{
					listener.lPressed = false;
					if (rocketMode)
					{
						lightSpeed = true;
					}
				}
				if (listener.exit)
				{
					if (panel.mouseLocked)
					{
						panel.mouseLocked = false;
						Screen.getContentPane().setCursor(Cursor.getDefaultCursor());
						listener.exit = false;
						panel.menu.setVisible(true);
						paint = true;
					}
					else
					{
						panel.menu.setVisible(false);
						panel.mouseLocked = true;
						BufferedImage cursorImg = new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB);
						Cursor blankCursor = Toolkit.getDefaultToolkit().createCustomCursor(
						    cursorImg, new Point(0, 0), "blank cursor");
						Screen.getContentPane().setCursor(blankCursor);
						listener.exit = false;
						paint = true;
					}
				}
				movementVector = movementVector.addPoint(addVector);
				panel.perspectiveLocation = panel.perspectiveLocation.addPoint(movementVector);
				if (panel.mouseLocked == true)
				{
					paint = true;
				}
				if (paint)
				{
					panel.repaint();
					panel.paint = false;
				}
			}
		}, 10, 10);
		panel.addMouseListener();
		Label instructionalText = new Label("[w][a][s][d][space][shift] To Move", panel, new Point());
		instructionalText.setFont(new Font("Times New Roman", Font.BOLD, 40));
		instructionalText.setLocation(new Point(panel.getWidth() / 2 - instructionalText.getWidth() / 2, panel.getHeight() / 2 - instructionalText.getHeight() / 2));
		instructionalText.visibility = 0;
		instructionalText.setVisible(true);
		instructionalText.color = new Color(255,255,255);
		Timer tim2 = new Timer();
		
		tim2.scheduleAtFixedRate(new TimerTask()
		{
			int ticks = 0;
			public void run()
			{
				ticks++;
				if (ticks < 400)
				{
					instructionalText.visibility = Math.sin(ticks / 400.0 * Math.PI);
				}
				if (ticks > 400 && ticks < 800)
				{
					instructionalText.setText("Hit [r] For Rocket Mode");
					instructionalText.visibility = Math.sin((ticks - 400) / 400.0 * Math.PI);
				}
				if (ticks > 800 && ticks < 1200)
				{
					instructionalText.setText("Press [esc] For Menu");
					instructionalText.visibility = Math.sin((ticks - 800) / 400.0 * Math.PI);
				}
				if (ticks > 1200)
				{
					tim2.purge();
					tim2.cancel();
				}
				instructionalText.setLocation(new Point(panel.getWidth() / 2 - instructionalText.getWidth() / 2, panel.getHeight() / 2 - instructionalText.getHeight() / 2));
				panel.paint = true;
			}
		}, 10, 10);
	}
	public static void graphEquation()
	public static void worldSetUp(Panel3D panel)
	{
		panel.disposeAll();
		///*
		for (double k = 0; k < width * width; k+= 1)
		{
			double x = k % width * wavelength - width * wavelength / 2 - 20;
			double y = (int)(k / width) * wavelength - width * wavelength / 2 - 20;
			double sineSwitch = Math.cos(k * 12324515131.1564) / Math.abs(Math.cos(k * 12324515131.1564));
			Dot a = new Dot(new Point3D(x, y, 1000 * Math.pow(Math.cos(x / 1000),2) * Math.pow(Math.cos(y / 1000), 2)));
			a.radius = 40;
			a.color = new Color((int) (200),(int) (0),(int) (200));
			panel.addControl3D(a);
			dots[(int)k] = a;
		}
		if (panel.saturn)
		{
			for (double k = 0; k <= 2500; k+= 1)
			{
				Dot a = new Dot(new Point3D( Math.cos(k / 20) * (int)(k / 40 / Math.PI + 40) * 50, Math.sin(k / 20) * (int)(k / 40 / Math.PI + 40) * 50 + 100000, -5000));
				a.radius = 200;
				a.color = new Color((int) (Math.random() * 60) + 100,(int) (Math.random() * 60) + 100,(int) (Math.random() * 60) + 100);
				panel.addControl3D(a);
			}
		}
		if (panel.stars)
		{
			for (double k = 0; k <= 25000; k+= 1)
			{
				double angleHorizontal = Math.random() * 2 * Math.PI;
				double angleVertical = Math.random() * 2 * Math.PI;
				Point3D starLocation = new Point3D(0, 0, 0).getPointAt(new Angle3D(angleHorizontal, angleVertical), 20000000);
				Dot a = new Dot(starLocation);
				a.radius = 50000 + Math.random() * 30000;
				a.color = new Color((int) (Math.random() * 56) + 200, 255,(int) (Math.random() * 56) + 200);
				panel.addControl3D(a);
			}
		}
		int cubeDotDistance = 20;
		int cubeDistance = 8000;
		for (int y = -200; y < 200; y+=cubeDotDistance)
		{
			for (int z = -200; z < 200; z+=cubeDotDistance)
			{
				Dot a = new Dot(new Point3D(1000 + cubeDistance, y, z));
				a.color = new Color((int) (255),(int) (0),(int) (0));
				panel.addControl3D(a);
			}
		}
		
		for (int x = 1000; x < 1400; x+=cubeDotDistance)
		{
			for (int z = -200; z < 200; z+=cubeDotDistance)
			{
				Dot a = new Dot(new Point3D(x + cubeDistance, 200, z));
				a.color = new Color((int) (0),(int) (255),(int) (0));
				panel.addControl3D(a);
			}
		}
		
		for (int x = 1000; x < 1400; x+=cubeDotDistance)
		{
			for (int z = -200; z < 200; z+=cubeDotDistance)
			{
				Dot a = new Dot(new Point3D(x + cubeDistance, - 200, z));
				a.color = new Color((int) (0),(int) (0),(int) (255));
				panel.addControl3D(a);
			}
		}
		
		for (int y = -200; y < 200; y+=cubeDotDistance)
		{
			for (int z = -200; z < 200; z+=cubeDotDistance)
			{
				Dot a = new Dot(new Point3D(1400 + cubeDistance, y, z));
				a.color = new Color((int) (255),(int) (255),(int) (0));
				panel.addControl3D(a);
			}
		}
		
		for (int x = 1000; x < 1400; x+=cubeDotDistance)
		{
			for (int y = -200; y < 200; y+=cubeDotDistance)
			{
				Dot a = new Dot(new Point3D(x + cubeDistance, y, 200));
				a.color = new Color((int) (255),(int) (0),(int) (255));
				panel.addControl3D(a);
			}
		}
		
		for (int x = 1000; x < 1400; x+=cubeDotDistance)
		{
			for (int y = -200; y < 200; y+=cubeDotDistance)
			{
				Dot a = new Dot(new Point3D(x + cubeDistance, y, - 200));
				a.color = new Color((int) (255),(int) (118),(int) (0));
				panel.addControl3D(a);
			}
		}
		if (panel.saturn)
		{
			Dot saturn = new Dot(new Point3D(0, 100000, - 5000));
			saturn.color = new Color(195, 107, 31);
			saturn.radius = 10000;
			panel.addControl3D(saturn);
		}
		Dot cubeLocator = new Dot(new Point3D(1200 + cubeDistance, 0, 0));
		cubeLocator.radius = 300;
		cubeLocator.color = new Color(255, 125, 0);
		cubeLocator.observatorium = true;
		panel.addControl3D(cubeLocator);
		
		if (panel.sun)
		{
			LensFlare sun = new LensFlare(new Point3D(100000, 1000000, 0));
			sun.color = new Color(247, 184, 19);
			sun.radius = 100000;
			panel.addControl3D(sun);
		}
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2934)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:623)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3036)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1393)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:343)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1145)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1322)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2019-04-10 14:22:30.740
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2934)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:623)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3036)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1393)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:343)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1145)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1322)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2019-04-10 14:22:30.743
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2934)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:623)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3036)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1393)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:343)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1145)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1322)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
!SESSION 2019-04-11 13:12:35.961 -----------------------------------------------
eclipse.buildId=4.9.0.I20180906-0745
java.version=1.8.0_191
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2019-04-11 13:13:04.281
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Liam'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
